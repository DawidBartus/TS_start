Core Types 

JS - dynamic types - resolved at runtime / TS - static types - set during development

the default type =  "I don't care type" = any

+ number => all numbers
+ string => "" `` ''
+ boolean => true / false 
+ object
+ array
+ undefined
+ void
+ Function
+ unknown 
+ never
+ Date

new types:

+ tuple -  fixed length and type array
+ enum - enum { NEW OLD }

+ any <= no specific type, you can use "any" type <= avoid it


+ union - it accepts more than one type
+ literal - we can assign a value which we want to use
---

TS object is different then JS object.

JS:
const person = {
    age: 26,
    name: 'David',
};

TS:
const person: {
    age: number;
    name: string;
}

---

JS
const person: object = {
    age: 26,
    name: 'David',
};

TS object:
const person: object

---

const person: {
    name: string;
    age: number;
} = {
    age: 26,
    name: 'David',
};

TS object:
const person: {
    name: string;
    age: number;
}

---

! array

JS:
const person = {
    age: 26,
    name: 'David',
    hobbies: ['coding', 'cooking', 'rollerblading'],
};

TS:
const person: {
    age: number;
    name: string;
    hobbies: string[];
}

---

JS
const person = {
    hobbies: ['coding', 'cooking', 'rollerblading', 123],
};

TS
const person: {
    hobbies: (string | number)[];
}

---

for (const hobby of person.hobbies){
    console.log(hobby.toUpperCase())
}

TS automatically detect that hobby is a string so after . it suggest string methods! - that's awesome!

---

! tuple

const person: {
    role: [number, string]; 
} = {
    role: [2, 'developer'],
};

role: [number, string]; => i want to have a special array with exactly 
two element and the first should be a number and a the second one should be a string!

if we / person.role.push('future') / it is possible and TS accept it bc push is an exception in tuple.

Will work:

const person: {
    age: number;
    name: string;
    hobbies: string[];
    role: [number, string];
} = {
    age: 26,
    name: 'David',
    hobbies: ['coding', 'cooking', 'rollerblading'],
    role: [2, 'developer'],
};

person.role.push('future');

---

person.role= []  <= throw an error 

person.role = [3, "admin"] <= it will work coz we match the scheme 
person.role = [3, "admin", 5] <= throw an error that only 2 elements are allowed

---
! Enum
human friendly identifier

enum Role {
    ADMIN,
    READ_ONLY,
    AUTHOR,
}

extra:
enum Role {
    ADMIN = 5,
    READ_ONLY = "toText",
    AUTHOR = 250,
}

normally enum start from 0 but you can change it. you can assign different value to each element in enum


enum Role {
    ADMIN,
    READ_ONLY,
    AUTHOR,
}

const person = {
    role: Role.ADMIN,
};

if (person.role === Role.ADMIN) {
    console.log(`${person.name} is Admin`);
}

we can use enum that way: Role.ADMIN

---
! union

const combine = (input1: number | string, input2: number | string) => {}

union type helps when we can accept more than one type. 
it helps but also can complicate function is TS throws an error

---
! literal types

resultConversion: 'as-number' | 'as-string'

we assign an union type to a resultConversion as a literal type
so we want to use string, but a specific one
in this case we use "as-number" string or "as-string" string 

in this case TS will help to find a typo or throw an error if we use different string! - its very helpful 

---
! type aliases

great option if someone use the same types couple of times

type Combinable = number | string;
type ConversionDescriptor = 'as-number' | 'as-string';

const combine = (
    input1: Combinable,
    input2: Combinable,
    resultConversion: ConversionDescriptor
) => {
    return input1 + input2
};

This way we can save time and space in code. It's easier to manage.

---
! Types & "void"

void type => when nothing is return (so if we log something for example) 

Function => if we store function in other value

let combineValues: (a: number, b: number) => number;
combineValues = addN;

---
! unknown

we can store any value there and we don't get error

unknown needs extra check if you want to assign a value to variable with type unknown <= good to know!

---
! never

never type never return a value - 